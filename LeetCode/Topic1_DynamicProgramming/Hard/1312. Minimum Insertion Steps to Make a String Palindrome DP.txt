class Solution:
    def minInsertions(self, s: str) -> int:
        n1 = len(s)
        
        # dp[i][j]: minimum insertion steps to make s[i:j] a string palindrome
        dp = [[0 for _ in range(n1)] for _ in range(n1)]
        # len = 1 initialization dp
        for i in range(n1):
            dp[i][i] = 0
        # len = 2 initialization dp
        for i in range(n1 - 1):
            if s[i] == s[i + 1]:
                dp[i][i + 1] = 0
            else:
                dp[i][i + 1] = 1
        
        for length in range(3, n1 + 1):
            for i in range(n1 + 1 - length):
                # starting point i, ending point j
                j = i + length -1
                if s[i] == s[j]:
                    dp[i][j] = dp[i + 1][j - 1]
                else:
                    dp[i][j] = min(dp[i + 1][j] + 1, dp[i][j - 1] + 1)
        return dp[0][n1 - 1]
                    
                