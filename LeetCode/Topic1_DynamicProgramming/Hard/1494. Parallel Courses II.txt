class Solution {
public:
    int minNumberOfSemesters(int n, vector<vector<int>>& dependencies, int k) 
    {
        // Huifeng Guan讲解： https://www.youtube.com/watch?v=g2jmxEzwtv0&feature=youtu.be
	// saved C++ since Python3 version has time limit issue
        vector<int>dp(1<<n, INT_MAX/2);
        vector<int>precourse(n, 0);
        vector<int>prereq(1<<n, 0);
        
        for (auto x: dependencies)
            precourse[x[1]-1] += 1<<(x[0]-1);
            
        for (int state = 0; state < (1 << n); state++)
        {
            prereq[state] = 0;
            for (int i = 0; i < n; i++)
            {
                if ((state>>i)&1)
                    prereq[state] |= precourse[i];                
            }
        }
        
        dp[0] = 0;
        for (int state = 0; state < (1 << n); state++)
             for (int subset = state; subset >= 0; subset = (subset - 1)&state)
             {
                 if (__builtin_popcount(state) - __builtin_popcount(subset) <= k && (subset & prereq[state]) == prereq[state])
                 {
                     dp[state] = min(dp[state], dp[subset] + 1);                 
                 }
                 if (subset==0) break;                 
             }
        return dp[(1<<n)-1];        
        
    }
};