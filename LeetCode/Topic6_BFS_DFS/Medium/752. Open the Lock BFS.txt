
class Solution {
public:
    int openLock(vector<string>& deadends, string target) 
    {
        //BFS
        unordered_set<string>deads(deadends.begin(), deadends.end());
        
        queue<string>q;
        unordered_set<string>visited;
        
        if (deads.find("0000") != deads.end())
            return -1;
        
        q.push("0000");
        visited.insert("0000");
        
        int step = -1;
        
        while (!q.empty())
        {
            step++;
            int len = q.size();
            while (len--)
            {
                string state = q.front();
                q.pop();
                
                for (string & next: scroll(state))
                {
                    if (visited.find(next) != visited.end())
                        continue;
                    if (deads.find(next) != deads.end())
                        continue;
                    if (next == target)
                        return step + 1;
                    
                    q.push(next);
                    visited.insert(next);
                }
            }
        }
        return -1;
    }
    
    vector<string>scroll(string state)
    {
        vector<string>rets;
        for (int i=0; i<4; i++)
            for (int d=-1; d<=1; d+=2)
            {
                int num = state[i] - '0';
                num = (num + d + 10)%10;
                string temp = state;
                temp[i] = '0' + num;
                rets.push_back(temp);
            }
        return rets;
    }
};