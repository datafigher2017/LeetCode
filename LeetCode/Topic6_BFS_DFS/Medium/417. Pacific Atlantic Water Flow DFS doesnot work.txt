class Solution {
    vector<pair<int, int>>dir;
public:
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) 
    {
        //DFS
        //http://youtu.be/N3EHz19C0G0
        int M = matrix.size();
        if (M==0) return {};
        int N = matrix[0].size();
        auto Pac = vector<vector<int>>(M, vector<int>(N, 0));
        auto Atl = vector<vector<int>>(M, vector<int>(N, 0));;
        dir = {{1,0},{-1,0},{0,1},{0,-1}};
        
        for (int i=0; i<M; i++)
            DFS(i, 0, matrix, Pac);
        for (int j=0; j<N; j++)
            DFS(0, j, matrix, Pac);
        
        for (int i=0; i<M; i++)
            DFS(i, N-1, matrix, Atl);
        for (int j=0; j<N; j++)
            DFS(M-1, j, matrix, Atl);    
        
        vector<pair<int, int>>res;
        for (int i=0; i<M; i++)
            for (int j=0; j<N; i++)
            {
                if (Pac[i][j] && Atl[i][j])
                    res.push_back({i,j});
            }
        return res;       
        
    }
    void DFS(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& Sea)
    {
        int M = matrix.size();
        int N = matrix[0].size();
        Sea[i][j] = 1;
        
        for (int k=0; k<4; k++)
        {
            int x = i + dir[k].first;
            int y = j + dir[k].second;
            if (x<0||x>=M||y<0||y>N) continue;
            if (Sea[x][y]==1) continue;
            if (Sea[x][y]<Sea[i][j]) continue;
            DFS(x,y,matrix,Sea);
        }
    }
};