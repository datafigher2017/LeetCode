class Solution {
    // visited[position][left or right]
    // 0: not visited; 1: visited;
    int visited[6001][2]; // x, forbidden, a, b <= 2000, limit <= 4000, limit + a <= 6000
public:
    int minimumJumps(vector<int>& forbidden, int a, int b, int x) 
    {   //https://github.com/wisdompeak/LeetCode/tree/master/BFS/1654.Minimum-Jumps-to-Reach-Home
        // m*a - n*b = x - 0
        // order of moving m right steps, n left steps doesn't matter if no forbidden positions
        // limit = max(x, max_forbidden) + b
        // if (cur <= limit && visited[cur + a] == 0) go right;
        // if (lastTime is right) if (cur - b >= 0 && visited[cur - b] == 0) go left;
        
        if (x==0) return 0;
        int max_forbid = *max_element(forbidden.begin(), forbidden.end());
        int limit = max(x, max_forbid)+b;

        for (auto x:forbidden)
        {
            visited[x][0] = -1;
            visited[x][1] = -1;
        }
        visited[0][0] = 0;
        
        queue<pair<int,int>>q;
        q.push({0,0});
        int step = 0;

        while (!q.empty())
        {
            int len = q.size();
            step++;
            while (len--)
            {
                int i = q.front().first;
                int k = q.front().second;
                q.pop();

                if (i <= limit && visited[i+a][0] == 0)
                {
                    visited[i+a][0] = 1;
                    q.push({i+a,0});
                    if (i+a==x) return step;
                }
                
                if (k==0)
                {
                    if (i-b>=0 && visited[i-b][1] == 0)
                    {
                        visited[i-b][1] = 1;
                        q.push({i-b,1});
                        if (i-b==x) return step;
                    }
                }
            }
        }
        return -1;        
        
        
    }
};