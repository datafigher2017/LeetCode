class Solution {
public:
    string alienOrder(vector<string>& words) 
    {
        //https://youtu.be/yfGJFDkyEmE
        // Topology Sort
        // BFS: is there circle after removing nodes with inDegree = 0
        
        unordered_map<char, unordered_set<char>>Next;
        unordered_map<char, int>inDegree;
        
        for (int i=0; i<words.size(); i++)
            for (int j=0; j<words[i].size(); j++)
                inDegree[words[i][j]] = 0;
        //build mapping graph
        for (int i=1; i<words.size(); i++)
        {
            string word1 = words[i-1];
            string word2 = words[i];
            
            //case: ab a is invalid input, return ""
            if (word1.size() > word2.size() && word1.substr(0, word2.size()) == word2)
                return "";
            
            for (int i=0; i<min(word1.size(), word2.size()); i++)
            {
                if (word1[i] == word2[i]) continue;
                //avoid duplicated counting inDegree of letters
                if (Next[word1[i]].find(word2[i]) == Next[word1[i]].end())
                {
                    Next[word1[i]].insert(word2[i]);
                    inDegree[word2[i]]++;
                }
                break;
            }
        }
        
        //BFS template code
        queue<char>q;
        for (auto a: inDegree)
            if (a.second == 0) q.push(a.first);
        string ret;
        
        while (!q.empty())
        {
            char cur = q.front();
            q.pop();
            ret += cur;
            
            for (auto a: Next[cur])
            {
                inDegree[a]--;
                if (inDegree[a]==0)
                    q.push(a);
            }
        }
        
        if (ret.size() != inDegree.size())
            return "";
        else
            return ret;
        
        
    }
};