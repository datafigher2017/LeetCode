class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        //deque sliding window max: monotone decreasing
        // min: monotone increasing
        //time complexicity O(N)
        //fix i, try j; then move i forward
        deque<int>qmax({0});
        deque<int>qmin({0});
        int ret = 1;
        int j = 0, mx = nums[0], mn = nums[0];
        
        for (int i=0; i<nums.size(); i++)
        {
            while(mx - mn <= limit)
            {
                ret = max(ret, j-i+1);
                j++;
                if (j == nums.size()) break;
                
                while (qmax.size()>0 && nums[j] >= nums[qmax.back()])
                    qmax.pop_back();
                qmax.push_back(j);
                mx = nums[qmax.front()];
                
                while (qmin.size()>0 && nums[j] <= nums[qmin.back()])
                    qmin.pop_back();
                qmin.push_back(j);
                mn = nums[qmin.front()];
            }
            cout<<i<<" "<<j<<" "<<ret<<endl;
            
            if (j==nums.size()) break;
            
            if (qmax.size()>0 && qmax.front() == i)
            {
                qmax.pop_front();
                mx = nums[qmax.front()];
            }
            
            if (qmin.size()>0 && qmin.front() == i)
            {
                qmin.pop_front();
                mn = nums[qmin.front()];
            }
        }
        return ret;
    }
};